// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	client "github.com/akash-network/node/client"
	broadcaster "github.com/akash-network/node/client/broadcaster"

	context "context"

	coretypes "github.com/tendermint/tendermint/rpc/core/types"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// NodeSyncInfo provides a mock function with given fields: _a0
func (_m *Client) NodeSyncInfo(_a0 context.Context) (*coretypes.SyncInfo, error) {
	ret := _m.Called(_a0)

	var r0 *coretypes.SyncInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*coretypes.SyncInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *coretypes.SyncInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.SyncInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_NodeSyncInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeSyncInfo'
type Client_NodeSyncInfo_Call struct {
	*mock.Call
}

// NodeSyncInfo is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Client_Expecter) NodeSyncInfo(_a0 interface{}) *Client_NodeSyncInfo_Call {
	return &Client_NodeSyncInfo_Call{Call: _e.mock.On("NodeSyncInfo", _a0)}
}

func (_c *Client_NodeSyncInfo_Call) Run(run func(_a0 context.Context)) *Client_NodeSyncInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Client_NodeSyncInfo_Call) Return(_a0 *coretypes.SyncInfo, _a1 error) *Client_NodeSyncInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_NodeSyncInfo_Call) RunAndReturn(run func(context.Context) (*coretypes.SyncInfo, error)) *Client_NodeSyncInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields:
func (_m *Client) Query() client.QueryClient {
	ret := _m.Called()

	var r0 client.QueryClient
	if rf, ok := ret.Get(0).(func() client.QueryClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.QueryClient)
		}
	}

	return r0
}

// Client_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Client_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
func (_e *Client_Expecter) Query() *Client_Query_Call {
	return &Client_Query_Call{Call: _e.mock.On("Query")}
}

func (_c *Client_Query_Call) Run(run func()) *Client_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Query_Call) Return(_a0 client.QueryClient) *Client_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Query_Call) RunAndReturn(run func() client.QueryClient) *Client_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Tx provides a mock function with given fields:
func (_m *Client) Tx() broadcaster.Client {
	ret := _m.Called()

	var r0 broadcaster.Client
	if rf, ok := ret.Get(0).(func() broadcaster.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(broadcaster.Client)
		}
	}

	return r0
}

// Client_Tx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tx'
type Client_Tx_Call struct {
	*mock.Call
}

// Tx is a helper method to define mock.On call
func (_e *Client_Expecter) Tx() *Client_Tx_Call {
	return &Client_Tx_Call{Call: _e.mock.On("Tx")}
}

func (_c *Client_Tx_Call) Run(run func()) *Client_Tx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Tx_Call) Return(_a0 broadcaster.Client) *Client_Tx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Tx_Call) RunAndReturn(run func() broadcaster.Client) *Client_Tx_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

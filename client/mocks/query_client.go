// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	audittypes "github.com/ovrclk/akash/x/audit/types"

	context "context"

	deploymenttypes "github.com/ovrclk/akash/x/deployment/types"

	grpc "google.golang.org/grpc"

	markettypes "github.com/ovrclk/akash/x/market/types"

	mock "github.com/stretchr/testify/mock"

	providertypes "github.com/ovrclk/akash/x/provider/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// QueryClient is an autogenerated mock type for the QueryClient type
type QueryClient struct {
	mock.Mock
}

// ActiveLeasesForProvider provides a mock function with given fields: id
func (_m *QueryClient) ActiveLeasesForProvider(id types.AccAddress) (markettypes.Leases, error) {
	ret := _m.Called(id)

	var r0 markettypes.Leases
	if rf, ok := ret.Get(0).(func(types.AccAddress) markettypes.Leases); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(markettypes.Leases)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.AccAddress) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllProvidersAttributes provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) AllProvidersAttributes(ctx context.Context, in *audittypes.QueryAllProvidersAttributesRequest, opts ...grpc.CallOption) (*audittypes.QueryProvidersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *audittypes.QueryProvidersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *audittypes.QueryAllProvidersAttributesRequest, ...grpc.CallOption) *audittypes.QueryProvidersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*audittypes.QueryProvidersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *audittypes.QueryAllProvidersAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditorAttributes provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) AuditorAttributes(ctx context.Context, in *audittypes.QueryAuditorAttributesRequest, opts ...grpc.CallOption) (*audittypes.QueryProvidersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *audittypes.QueryProvidersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *audittypes.QueryAuditorAttributesRequest, ...grpc.CallOption) *audittypes.QueryProvidersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*audittypes.QueryProvidersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *audittypes.QueryAuditorAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Bid provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Bid(ctx context.Context, in *markettypes.QueryBidRequest, opts ...grpc.CallOption) (*markettypes.QueryBidResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *markettypes.QueryBidResponse
	if rf, ok := ret.Get(0).(func(context.Context, *markettypes.QueryBidRequest, ...grpc.CallOption) *markettypes.QueryBidResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*markettypes.QueryBidResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *markettypes.QueryBidRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Bids provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Bids(ctx context.Context, in *markettypes.QueryBidsRequest, opts ...grpc.CallOption) (*markettypes.QueryBidsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *markettypes.QueryBidsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *markettypes.QueryBidsRequest, ...grpc.CallOption) *markettypes.QueryBidsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*markettypes.QueryBidsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *markettypes.QueryBidsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deployment provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Deployment(ctx context.Context, in *deploymenttypes.QueryDeploymentRequest, opts ...grpc.CallOption) (*deploymenttypes.QueryDeploymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deploymenttypes.QueryDeploymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *deploymenttypes.QueryDeploymentRequest, ...grpc.CallOption) *deploymenttypes.QueryDeploymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deploymenttypes.QueryDeploymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *deploymenttypes.QueryDeploymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Deployments provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Deployments(ctx context.Context, in *deploymenttypes.QueryDeploymentsRequest, opts ...grpc.CallOption) (*deploymenttypes.QueryDeploymentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deploymenttypes.QueryDeploymentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *deploymenttypes.QueryDeploymentsRequest, ...grpc.CallOption) *deploymenttypes.QueryDeploymentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deploymenttypes.QueryDeploymentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *deploymenttypes.QueryDeploymentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Group provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Group(ctx context.Context, in *deploymenttypes.QueryGroupRequest, opts ...grpc.CallOption) (*deploymenttypes.QueryGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deploymenttypes.QueryGroupResponse
	if rf, ok := ret.Get(0).(func(context.Context, *deploymenttypes.QueryGroupRequest, ...grpc.CallOption) *deploymenttypes.QueryGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deploymenttypes.QueryGroupResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *deploymenttypes.QueryGroupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lease provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Lease(ctx context.Context, in *markettypes.QueryLeaseRequest, opts ...grpc.CallOption) (*markettypes.QueryLeaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *markettypes.QueryLeaseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *markettypes.QueryLeaseRequest, ...grpc.CallOption) *markettypes.QueryLeaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*markettypes.QueryLeaseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *markettypes.QueryLeaseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Leases provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Leases(ctx context.Context, in *markettypes.QueryLeasesRequest, opts ...grpc.CallOption) (*markettypes.QueryLeasesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *markettypes.QueryLeasesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *markettypes.QueryLeasesRequest, ...grpc.CallOption) *markettypes.QueryLeasesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*markettypes.QueryLeasesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *markettypes.QueryLeasesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Order provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Order(ctx context.Context, in *markettypes.QueryOrderRequest, opts ...grpc.CallOption) (*markettypes.QueryOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *markettypes.QueryOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *markettypes.QueryOrderRequest, ...grpc.CallOption) *markettypes.QueryOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*markettypes.QueryOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *markettypes.QueryOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Orders provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Orders(ctx context.Context, in *markettypes.QueryOrdersRequest, opts ...grpc.CallOption) (*markettypes.QueryOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *markettypes.QueryOrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *markettypes.QueryOrdersRequest, ...grpc.CallOption) *markettypes.QueryOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*markettypes.QueryOrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *markettypes.QueryOrdersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Provider(ctx context.Context, in *providertypes.QueryProviderRequest, opts ...grpc.CallOption) (*providertypes.QueryProviderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *providertypes.QueryProviderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *providertypes.QueryProviderRequest, ...grpc.CallOption) *providertypes.QueryProviderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*providertypes.QueryProviderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *providertypes.QueryProviderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderAttributes provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) ProviderAttributes(ctx context.Context, in *audittypes.QueryProviderAttributesRequest, opts ...grpc.CallOption) (*audittypes.QueryProvidersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *audittypes.QueryProvidersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *audittypes.QueryProviderAttributesRequest, ...grpc.CallOption) *audittypes.QueryProvidersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*audittypes.QueryProvidersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *audittypes.QueryProviderAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderAuditorAttributes provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) ProviderAuditorAttributes(ctx context.Context, in *audittypes.QueryProviderAuditorRequest, opts ...grpc.CallOption) (*audittypes.QueryProvidersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *audittypes.QueryProvidersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *audittypes.QueryProviderAuditorRequest, ...grpc.CallOption) *audittypes.QueryProvidersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*audittypes.QueryProvidersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *audittypes.QueryProviderAuditorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Providers provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Providers(ctx context.Context, in *providertypes.QueryProvidersRequest, opts ...grpc.CallOption) (*providertypes.QueryProvidersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *providertypes.QueryProvidersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *providertypes.QueryProvidersRequest, ...grpc.CallOption) *providertypes.QueryProvidersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*providertypes.QueryProvidersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *providertypes.QueryProvidersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

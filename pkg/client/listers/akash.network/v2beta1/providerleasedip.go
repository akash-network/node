/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v2beta1

import (
	v2beta1 "github.com/ovrclk/akash/pkg/apis/akash.network/v2beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProviderLeasedIPLister helps list ProviderLeasedIPs.
// All objects returned here must be treated as read-only.
type ProviderLeasedIPLister interface {
	// List lists all ProviderLeasedIPs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2beta1.ProviderLeasedIP, err error)
	// ProviderLeasedIPs returns an object that can list and get ProviderLeasedIPs.
	ProviderLeasedIPs(namespace string) ProviderLeasedIPNamespaceLister
	ProviderLeasedIPListerExpansion
}

// providerLeasedIPLister implements the ProviderLeasedIPLister interface.
type providerLeasedIPLister struct {
	indexer cache.Indexer
}

// NewProviderLeasedIPLister returns a new ProviderLeasedIPLister.
func NewProviderLeasedIPLister(indexer cache.Indexer) ProviderLeasedIPLister {
	return &providerLeasedIPLister{indexer: indexer}
}

// List lists all ProviderLeasedIPs in the indexer.
func (s *providerLeasedIPLister) List(selector labels.Selector) (ret []*v2beta1.ProviderLeasedIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2beta1.ProviderLeasedIP))
	})
	return ret, err
}

// ProviderLeasedIPs returns an object that can list and get ProviderLeasedIPs.
func (s *providerLeasedIPLister) ProviderLeasedIPs(namespace string) ProviderLeasedIPNamespaceLister {
	return providerLeasedIPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProviderLeasedIPNamespaceLister helps list and get ProviderLeasedIPs.
// All objects returned here must be treated as read-only.
type ProviderLeasedIPNamespaceLister interface {
	// List lists all ProviderLeasedIPs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2beta1.ProviderLeasedIP, err error)
	// Get retrieves the ProviderLeasedIP from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v2beta1.ProviderLeasedIP, error)
	ProviderLeasedIPNamespaceListerExpansion
}

// providerLeasedIPNamespaceLister implements the ProviderLeasedIPNamespaceLister
// interface.
type providerLeasedIPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProviderLeasedIPs in the indexer for a given namespace.
func (s providerLeasedIPNamespaceLister) List(selector labels.Selector) (ret []*v2beta1.ProviderLeasedIP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2beta1.ProviderLeasedIP))
	})
	return ret, err
}

// Get retrieves the ProviderLeasedIP from the indexer for a given namespace and name.
func (s providerLeasedIPNamespaceLister) Get(name string) (*v2beta1.ProviderLeasedIP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2beta1.Resource("providerleasedip"), name)
	}
	return obj.(*v2beta1.ProviderLeasedIP), nil
}

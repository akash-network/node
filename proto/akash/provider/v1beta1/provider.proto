syntax = "proto3";
package akash.provider.v1beta1;

import "gogoproto/gogo.proto";
import "akash/base/v1beta1/attribute.proto";

option go_package = "github.com/ovrclk/akash/x/provider/types";

service Msg {
  // CreateProvider defines a method that creates a provider given the proper inputs
  rpc CreateProvider(MsgCreateProvider) returns (MsgCreateProviderResponse);

  // UpdateProvider defines a method that updates a provider given the proper inputs
  rpc UpdateProvider(MsgUpdateProvider) returns (MsgUpdateProviderResponse);

  // DeleteProvider defines a method that deletes a provider given the proper inputs
  rpc DeleteProvider(MsgDeleteProvider) returns (MsgDeleteProviderResponse);
}

// MsgCreateProvider defines an SDK message for creating a provider
message MsgCreateProvider {
  option (gogoproto.equal) = false;

  string owner    = 1 [(gogoproto.jsontag) = "owner", (gogoproto.moretags) = "yaml:\"owner\""];
  string host_uri = 2 [
    (gogoproto.customname) = "HostURI",
    (gogoproto.jsontag)    = "host-uri",
    (gogoproto.moretags)   = "yaml:\"host-uri\""
  ];
  repeated akash.base.v1beta1.Attribute attributes = 3 [
    (gogoproto.castrepeated) = "Attributes",
    (gogoproto.nullable)     = false,
    (gogoproto.jsontag)      = "attributes",
    (gogoproto.moretags)     = "yaml:\"attributes\""
  ];
}

message MsgCreateProviderResponse {}

// MsgUpdateProvider defines an SDK message for updating a provider
message MsgUpdateProvider {
  option (gogoproto.equal) = false;

  string owner    = 1 [(gogoproto.jsontag) = "owner", (gogoproto.moretags) = "yaml:\"owner\""];
  string host_uri = 2 [
    (gogoproto.customname) = "HostURI",
    (gogoproto.jsontag)    = "host-uri",
    (gogoproto.moretags)   = "yaml:\"host-uri\""
  ];
  repeated akash.base.v1beta1.Attribute attributes = 3 [
    (gogoproto.castrepeated) = "Attributes",
    (gogoproto.nullable)     = false,
    (gogoproto.jsontag)      = "attributes",
    (gogoproto.moretags)     = "yaml:\"attributes\""
  ];
}

message MsgUpdateProviderResponse {}

// MsgDeleteProvider defines an SDK message for deleting a provider
message MsgDeleteProvider {
  option (gogoproto.equal) = false;

  string owner = 1 [(gogoproto.jsontag) = "owner", (gogoproto.moretags) = "yaml:\"owner\""];
}

message MsgDeleteProviderResponse {}

// Provider stores owner and host details
message Provider {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;

  string owner    = 1 [(gogoproto.jsontag) = "owner", (gogoproto.moretags) = "yaml:\"owner\""];
  string host_uri = 2 [
    (gogoproto.customname) = "HostURI",
    (gogoproto.jsontag)    = "host-uri",
    (gogoproto.moretags)   = "yaml:\"host-uri\""
  ];
  repeated akash.base.v1beta1.Attribute attributes = 3 [
    (gogoproto.castrepeated) = "Attributes",
    (gogoproto.nullable)     = false,
    (gogoproto.jsontag)      = "attributes",
    (gogoproto.moretags)     = "yaml:\"attributes\""
  ];
}

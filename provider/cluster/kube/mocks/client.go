// Code generated by mockery v1.0.0
package mocks

import cluster "github.com/ovrclk/akash/provider/cluster"

import mock "github.com/stretchr/testify/mock"
import types "github.com/ovrclk/akash/types"
import v1 "k8s.io/api/apps/v1"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Deploy provides a mock function with given fields: _a0, _a1
func (_m *Client) Deploy(_a0 types.LeaseID, _a1 *types.ManifestGroup) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.LeaseID, *types.ManifestGroup) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deployments provides a mock function with given fields:
func (_m *Client) Deployments() ([]cluster.Deployment, error) {
	ret := _m.Called()

	var r0 []cluster.Deployment
	if rf, ok := ret.Get(0).(func() []cluster.Deployment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cluster.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubeDeployment provides a mock function with given fields: _a0, _a1
func (_m *Client) KubeDeployment(_a0 types.LeaseID, _a1 string) (*v1.Deployment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Deployment
	if rf, ok := ret.Get(0).(func(types.LeaseID, string) *v1.Deployment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.LeaseID, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubeDeployments provides a mock function with given fields: _a0
func (_m *Client) KubeDeployments(_a0 types.LeaseID) (*v1.DeploymentList, error) {
	ret := _m.Called(_a0)

	var r0 *v1.DeploymentList
	if rf, ok := ret.Get(0).(func(types.LeaseID) *v1.DeploymentList); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeploymentList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.LeaseID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Teardown provides a mock function with given fields: _a0
func (_m *Client) Teardown(_a0 types.LeaseID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.LeaseID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

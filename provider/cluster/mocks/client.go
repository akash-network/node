// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	clustertypes "github.com/ovrclk/akash/provider/cluster/types"

	io "io"

	manifest "github.com/ovrclk/akash/manifest"

	mock "github.com/stretchr/testify/mock"

	remotecommand "k8s.io/client-go/tools/remotecommand"

	types "github.com/ovrclk/akash/x/market/types"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Deploy provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) Deploy(_a0 context.Context, _a1 types.LeaseID, _a2 *manifest.Group) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.LeaseID, *manifest.Group) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deployments provides a mock function with given fields: _a0
func (_m *Client) Deployments(_a0 context.Context) ([]clustertypes.Deployment, error) {
	ret := _m.Called(_a0)

	var r0 []clustertypes.Deployment
	if rf, ok := ret.Get(0).(func(context.Context) []clustertypes.Deployment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clustertypes.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exec provides a mock function with given fields: ctx, lID, service, podIndex, cmd, stdin, stdout, stderr, tty, tsq
func (_m *Client) Exec(ctx context.Context, lID types.LeaseID, service string, podIndex uint, cmd []string, stdin io.Reader, stdout io.Writer, stderr io.Writer, tty bool, tsq remotecommand.TerminalSizeQueue) (clustertypes.ExecResult, error) {
	ret := _m.Called(ctx, lID, service, podIndex, cmd, stdin, stdout, stderr, tty, tsq)

	var r0 clustertypes.ExecResult
	if rf, ok := ret.Get(0).(func(context.Context, types.LeaseID, string, uint, []string, io.Reader, io.Writer, io.Writer, bool, remotecommand.TerminalSizeQueue) clustertypes.ExecResult); ok {
		r0 = rf(ctx, lID, service, podIndex, cmd, stdin, stdout, stderr, tty, tsq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clustertypes.ExecResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.LeaseID, string, uint, []string, io.Reader, io.Writer, io.Writer, bool, remotecommand.TerminalSizeQueue) error); ok {
		r1 = rf(ctx, lID, service, podIndex, cmd, stdin, stdout, stderr, tty, tsq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inventory provides a mock function with given fields: _a0
func (_m *Client) Inventory(_a0 context.Context) ([]clustertypes.Node, error) {
	ret := _m.Called(_a0)

	var r0 []clustertypes.Node
	if rf, ok := ret.Get(0).(func(context.Context) []clustertypes.Node); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clustertypes.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaseEvents provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Client) LeaseEvents(_a0 context.Context, _a1 types.LeaseID, _a2 string, _a3 bool) (clustertypes.EventsWatcher, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 clustertypes.EventsWatcher
	if rf, ok := ret.Get(0).(func(context.Context, types.LeaseID, string, bool) clustertypes.EventsWatcher); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clustertypes.EventsWatcher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.LeaseID, string, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaseLogs provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *Client) LeaseLogs(_a0 context.Context, _a1 types.LeaseID, _a2 string, _a3 bool, _a4 *int64) ([]*clustertypes.ServiceLog, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*clustertypes.ServiceLog
	if rf, ok := ret.Get(0).(func(context.Context, types.LeaseID, string, bool, *int64) []*clustertypes.ServiceLog); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*clustertypes.ServiceLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.LeaseID, string, bool, *int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaseStatus provides a mock function with given fields: _a0, _a1
func (_m *Client) LeaseStatus(_a0 context.Context, _a1 types.LeaseID) (*clustertypes.LeaseStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *clustertypes.LeaseStatus
	if rf, ok := ret.Get(0).(func(context.Context, types.LeaseID) *clustertypes.LeaseStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clustertypes.LeaseStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.LeaseID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) ServiceStatus(_a0 context.Context, _a1 types.LeaseID, _a2 string) (*clustertypes.ServiceStatus, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *clustertypes.ServiceStatus
	if rf, ok := ret.Get(0).(func(context.Context, types.LeaseID, string) *clustertypes.ServiceStatus); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clustertypes.ServiceStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.LeaseID, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeardownLease provides a mock function with given fields: _a0, _a1
func (_m *Client) TeardownLease(_a0 context.Context, _a1 types.LeaseID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.LeaseID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

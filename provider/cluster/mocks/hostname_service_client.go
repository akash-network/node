// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	markettypes "github.com/ovrclk/akash/x/market/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// HostnameServiceClient is an autogenerated mock type for the HostnameServiceClient type
type HostnameServiceClient struct {
	mock.Mock
}

// CanReserveHostnames provides a mock function with given fields: hostnames, ownerAddr
func (_m *HostnameServiceClient) CanReserveHostnames(hostnames []string, ownerAddr types.Address) error {
	ret := _m.Called(hostnames, ownerAddr)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, types.Address) error); ok {
		r0 = rf(hostnames, ownerAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrepareHostnamesForTransfer provides a mock function with given fields: ctx, hostnames, leaseID
func (_m *HostnameServiceClient) PrepareHostnamesForTransfer(ctx context.Context, hostnames []string, leaseID markettypes.LeaseID) error {
	ret := _m.Called(ctx, hostnames, leaseID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, markettypes.LeaseID) error); ok {
		r0 = rf(ctx, hostnames, leaseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseHostnames provides a mock function with given fields: leaseID
func (_m *HostnameServiceClient) ReleaseHostnames(leaseID markettypes.LeaseID) error {
	ret := _m.Called(leaseID)

	var r0 error
	if rf, ok := ret.Get(0).(func(markettypes.LeaseID) error); ok {
		r0 = rf(leaseID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReserveHostnames provides a mock function with given fields: ctx, hostnames, leaseID
func (_m *HostnameServiceClient) ReserveHostnames(ctx context.Context, hostnames []string, leaseID markettypes.LeaseID) ([]string, error) {
	ret := _m.Called(ctx, hostnames, leaseID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, []string, markettypes.LeaseID) []string); ok {
		r0 = rf(ctx, hostnames, leaseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, markettypes.LeaseID) error); ok {
		r1 = rf(ctx, hostnames, leaseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

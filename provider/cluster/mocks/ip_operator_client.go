// Code generated by mockery 2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	types "github.com/ovrclk/akash/provider/operator/ipoperator/types"

	v1beta2 "github.com/ovrclk/akash/x/market/types/v1beta2"
)

// IPOperatorClient is an autogenerated mock type for the IPOperatorClient type
type IPOperatorClient struct {
	mock.Mock
}

// Check provides a mock function with given fields: ctx
func (_m *IPOperatorClient) Check(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetIPAddressStatus provides a mock function with given fields: ctx, orderID
func (_m *IPOperatorClient) GetIPAddressStatus(ctx context.Context, orderID v1beta2.OrderID) ([]types.LeaseIPStatus, error) {
	ret := _m.Called(ctx, orderID)

	var r0 []types.LeaseIPStatus
	if rf, ok := ret.Get(0).(func(context.Context, v1beta2.OrderID) []types.LeaseIPStatus); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.LeaseIPStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, v1beta2.OrderID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPAddressUsage provides a mock function with given fields: ctx
func (_m *IPOperatorClient) GetIPAddressUsage(ctx context.Context) (types.IPAddressUsage, error) {
	ret := _m.Called(ctx)

	var r0 types.IPAddressUsage
	if rf, ok := ret.Get(0).(func(context.Context) types.IPAddressUsage); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.IPAddressUsage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *IPOperatorClient) Stop() {
	_m.Called()
}

// String provides a mock function with given fields:
func (_m *IPOperatorClient) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewIPOperatorClient creates a new instance of IPOperatorClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPOperatorClient(t testing.TB) *IPOperatorClient {
	mock := &IPOperatorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cluster "github.com/ovrclk/akash/provider/cluster/types"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/ovrclk/akash/pkg/apis/akash.network/v1"

	v1beta2 "github.com/ovrclk/akash/x/market/types/v1beta2"
)

// ReadClient is an autogenerated mock type for the ReadClient type
type ReadClient struct {
	mock.Mock
}

// AllHostnames provides a mock function with given fields: _a0
func (_m *ReadClient) AllHostnames(_a0 context.Context) ([]cluster.ActiveHostname, error) {
	ret := _m.Called(_a0)

	var r0 []cluster.ActiveHostname
	if rf, ok := ret.Get(0).(func(context.Context) []cluster.ActiveHostname); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cluster.ActiveHostname)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostnameDeploymentConnections provides a mock function with given fields: ctx
func (_m *ReadClient) GetHostnameDeploymentConnections(ctx context.Context) ([]cluster.LeaseIDHostnameConnection, error) {
	ret := _m.Called(ctx)

	var r0 []cluster.LeaseIDHostnameConnection
	if rf, ok := ret.Get(0).(func(context.Context) []cluster.LeaseIDHostnameConnection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cluster.LeaseIDHostnameConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManifestGroup provides a mock function with given fields: _a0, _a1
func (_m *ReadClient) GetManifestGroup(_a0 context.Context, _a1 v1beta2.LeaseID) (bool, v1.ManifestGroup, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, v1beta2.LeaseID) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 v1.ManifestGroup
	if rf, ok := ret.Get(1).(func(context.Context, v1beta2.LeaseID) v1.ManifestGroup); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(v1.ManifestGroup)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, v1beta2.LeaseID) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LeaseEvents provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ReadClient) LeaseEvents(_a0 context.Context, _a1 v1beta2.LeaseID, _a2 string, _a3 bool) (cluster.EventsWatcher, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 cluster.EventsWatcher
	if rf, ok := ret.Get(0).(func(context.Context, v1beta2.LeaseID, string, bool) cluster.EventsWatcher); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cluster.EventsWatcher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, v1beta2.LeaseID, string, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaseLogs provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ReadClient) LeaseLogs(_a0 context.Context, _a1 v1beta2.LeaseID, _a2 string, _a3 bool, _a4 *int64) ([]*cluster.ServiceLog, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*cluster.ServiceLog
	if rf, ok := ret.Get(0).(func(context.Context, v1beta2.LeaseID, string, bool, *int64) []*cluster.ServiceLog); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*cluster.ServiceLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, v1beta2.LeaseID, string, bool, *int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaseStatus provides a mock function with given fields: _a0, _a1
func (_m *ReadClient) LeaseStatus(_a0 context.Context, _a1 v1beta2.LeaseID) (*cluster.LeaseStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cluster.LeaseStatus
	if rf, ok := ret.Get(0).(func(context.Context, v1beta2.LeaseID) *cluster.LeaseStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.LeaseStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, v1beta2.LeaseID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObserveHostnameState provides a mock function with given fields: ctx
func (_m *ReadClient) ObserveHostnameState(ctx context.Context) (<-chan cluster.HostnameResourceEvent, error) {
	ret := _m.Called(ctx)

	var r0 <-chan cluster.HostnameResourceEvent
	if rf, ok := ret.Get(0).(func(context.Context) <-chan cluster.HostnameResourceEvent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan cluster.HostnameResourceEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *ReadClient) ServiceStatus(_a0 context.Context, _a1 v1beta2.LeaseID, _a2 string) (*cluster.ServiceStatus, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *cluster.ServiceStatus
	if rf, ok := ret.Get(0).(func(context.Context, v1beta2.LeaseID, string) *cluster.ServiceStatus); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ServiceStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, v1beta2.LeaseID, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

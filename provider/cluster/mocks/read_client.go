// Code generated by mockery 2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	typesv1beta2 "github.com/ovrclk/akash/x/market/types/v1beta2"

	v1beta2 "github.com/ovrclk/akash/provider/cluster/types/v1beta2"

	v2beta1 "github.com/ovrclk/akash/pkg/apis/akash.network/v2beta1"
)

// ReadClient is an autogenerated mock type for the ReadClient type
type ReadClient struct {
	mock.Mock
}

// AllHostnames provides a mock function with given fields: _a0
func (_m *ReadClient) AllHostnames(_a0 context.Context) ([]v1beta2.ActiveHostname, error) {
	ret := _m.Called(_a0)

	var r0 []v1beta2.ActiveHostname
	if rf, ok := ret.Get(0).(func(context.Context) []v1beta2.ActiveHostname); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1beta2.ActiveHostname)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForwardedPortStatus provides a mock function with given fields: _a0, _a1
func (_m *ReadClient) ForwardedPortStatus(_a0 context.Context, _a1 typesv1beta2.LeaseID) (map[string][]v1beta2.ForwardedPortStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 map[string][]v1beta2.ForwardedPortStatus
	if rf, ok := ret.Get(0).(func(context.Context, typesv1beta2.LeaseID) map[string][]v1beta2.ForwardedPortStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]v1beta2.ForwardedPortStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, typesv1beta2.LeaseID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeclaredIPs provides a mock function with given fields: ctx, leaseID
func (_m *ReadClient) GetDeclaredIPs(ctx context.Context, leaseID typesv1beta2.LeaseID) ([]v2beta1.ProviderLeasedIPSpec, error) {
	ret := _m.Called(ctx, leaseID)

	var r0 []v2beta1.ProviderLeasedIPSpec
	if rf, ok := ret.Get(0).(func(context.Context, typesv1beta2.LeaseID) []v2beta1.ProviderLeasedIPSpec); ok {
		r0 = rf(ctx, leaseID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v2beta1.ProviderLeasedIPSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, typesv1beta2.LeaseID) error); ok {
		r1 = rf(ctx, leaseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostnameDeploymentConnections provides a mock function with given fields: ctx
func (_m *ReadClient) GetHostnameDeploymentConnections(ctx context.Context) ([]v1beta2.LeaseIDHostnameConnection, error) {
	ret := _m.Called(ctx)

	var r0 []v1beta2.LeaseIDHostnameConnection
	if rf, ok := ret.Get(0).(func(context.Context) []v1beta2.LeaseIDHostnameConnection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1beta2.LeaseIDHostnameConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManifestGroup provides a mock function with given fields: _a0, _a1
func (_m *ReadClient) GetManifestGroup(_a0 context.Context, _a1 typesv1beta2.LeaseID) (bool, v2beta1.ManifestGroup, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, typesv1beta2.LeaseID) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 v2beta1.ManifestGroup
	if rf, ok := ret.Get(1).(func(context.Context, typesv1beta2.LeaseID) v2beta1.ManifestGroup); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(v2beta1.ManifestGroup)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, typesv1beta2.LeaseID) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LeaseEvents provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ReadClient) LeaseEvents(_a0 context.Context, _a1 typesv1beta2.LeaseID, _a2 string, _a3 bool) (v1beta2.EventsWatcher, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 v1beta2.EventsWatcher
	if rf, ok := ret.Get(0).(func(context.Context, typesv1beta2.LeaseID, string, bool) v1beta2.EventsWatcher); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta2.EventsWatcher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, typesv1beta2.LeaseID, string, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaseLogs provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ReadClient) LeaseLogs(_a0 context.Context, _a1 typesv1beta2.LeaseID, _a2 string, _a3 bool, _a4 *int64) ([]*v1beta2.ServiceLog, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 []*v1beta2.ServiceLog
	if rf, ok := ret.Get(0).(func(context.Context, typesv1beta2.LeaseID, string, bool, *int64) []*v1beta2.ServiceLog); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1beta2.ServiceLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, typesv1beta2.LeaseID, string, bool, *int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LeaseStatus provides a mock function with given fields: _a0, _a1
func (_m *ReadClient) LeaseStatus(_a0 context.Context, _a1 typesv1beta2.LeaseID) (map[string]*v1beta2.ServiceStatus, error) {
	ret := _m.Called(_a0, _a1)

	var r0 map[string]*v1beta2.ServiceStatus
	if rf, ok := ret.Get(0).(func(context.Context, typesv1beta2.LeaseID) map[string]*v1beta2.ServiceStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*v1beta2.ServiceStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, typesv1beta2.LeaseID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObserveHostnameState provides a mock function with given fields: ctx
func (_m *ReadClient) ObserveHostnameState(ctx context.Context) (<-chan v1beta2.HostnameResourceEvent, error) {
	ret := _m.Called(ctx)

	var r0 <-chan v1beta2.HostnameResourceEvent
	if rf, ok := ret.Get(0).(func(context.Context) <-chan v1beta2.HostnameResourceEvent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan v1beta2.HostnameResourceEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObserveIPState provides a mock function with given fields: ctx
func (_m *ReadClient) ObserveIPState(ctx context.Context) (<-chan v1beta2.IPResourceEvent, error) {
	ret := _m.Called(ctx)

	var r0 <-chan v1beta2.IPResourceEvent
	if rf, ok := ret.Get(0).(func(context.Context) <-chan v1beta2.IPResourceEvent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan v1beta2.IPResourceEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *ReadClient) ServiceStatus(_a0 context.Context, _a1 typesv1beta2.LeaseID, _a2 string) (*v1beta2.ServiceStatus, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *v1beta2.ServiceStatus
	if rf, ok := ret.Get(0).(func(context.Context, typesv1beta2.LeaseID, string) *v1beta2.ServiceStatus); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta2.ServiceStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, typesv1beta2.LeaseID, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReadClient creates a new instance of ReadClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewReadClient(t testing.TB) *ReadClient {
	mock := &ReadClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	akashtypes "github.com/ovrclk/akash/types"

	clustertypes "github.com/ovrclk/akash/provider/cluster/types"

	context "context"

	markettypes "github.com/ovrclk/akash/x/market/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"

	v1 "github.com/ovrclk/akash/pkg/apis/akash.network/v1"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Service) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Done provides a mock function with given fields:
func (_m *Service) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// FindActiveLease provides a mock function with given fields: ctx, owner, dseq, gseq
func (_m *Service) FindActiveLease(ctx context.Context, owner types.Address, dseq uint64, gseq uint32) (bool, markettypes.LeaseID, v1.ManifestGroup, error) {
	ret := _m.Called(ctx, owner, dseq, gseq)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, types.Address, uint64, uint32) bool); ok {
		r0 = rf(ctx, owner, dseq, gseq)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 markettypes.LeaseID
	if rf, ok := ret.Get(1).(func(context.Context, types.Address, uint64, uint32) markettypes.LeaseID); ok {
		r1 = rf(ctx, owner, dseq, gseq)
	} else {
		r1 = ret.Get(1).(markettypes.LeaseID)
	}

	var r2 v1.ManifestGroup
	if rf, ok := ret.Get(2).(func(context.Context, types.Address, uint64, uint32) v1.ManifestGroup); ok {
		r2 = rf(ctx, owner, dseq, gseq)
	} else {
		r2 = ret.Get(2).(v1.ManifestGroup)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, types.Address, uint64, uint32) error); ok {
		r3 = rf(ctx, owner, dseq, gseq)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// HostnameService provides a mock function with given fields:
func (_m *Service) HostnameService() clustertypes.HostnameServiceClient {
	ret := _m.Called()

	var r0 clustertypes.HostnameServiceClient
	if rf, ok := ret.Get(0).(func() clustertypes.HostnameServiceClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clustertypes.HostnameServiceClient)
		}
	}

	return r0
}

// Ready provides a mock function with given fields:
func (_m *Service) Ready() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Reserve provides a mock function with given fields: _a0, _a1
func (_m *Service) Reserve(_a0 markettypes.OrderID, _a1 akashtypes.ResourceGroup) (clustertypes.Reservation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 clustertypes.Reservation
	if rf, ok := ret.Get(0).(func(markettypes.OrderID, akashtypes.ResourceGroup) clustertypes.Reservation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clustertypes.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(markettypes.OrderID, akashtypes.ResourceGroup) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: _a0
func (_m *Service) Status(_a0 context.Context) (*clustertypes.Status, error) {
	ret := _m.Called(_a0)

	var r0 *clustertypes.Status
	if rf, ok := ret.Get(0).(func(context.Context) *clustertypes.Status); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clustertypes.Status)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferHostname provides a mock function with given fields: ctx, leaseID, hostname, serviceName, externalPort
func (_m *Service) TransferHostname(ctx context.Context, leaseID markettypes.LeaseID, hostname string, serviceName string, externalPort uint32) error {
	ret := _m.Called(ctx, leaseID, hostname, serviceName, externalPort)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, markettypes.LeaseID, string, string, uint32) error); ok {
		r0 = rf(ctx, leaseID, hostname, serviceName, externalPort)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unreserve provides a mock function with given fields: _a0
func (_m *Service) Unreserve(_a0 markettypes.OrderID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(markettypes.OrderID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

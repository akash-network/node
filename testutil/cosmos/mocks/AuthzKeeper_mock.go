// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package keeper

import (
	"context"
	"time"

	"github.com/cosmos/cosmos-sdk/types"
	"github.com/cosmos/cosmos-sdk/x/authz"
	"github.com/cosmos/cosmos-sdk/x/authz/keeper"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthzKeeper creates a new instance of AuthzKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthzKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthzKeeper {
	mock := &AuthzKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthzKeeper is an autogenerated mock type for the AuthzKeeper type
type AuthzKeeper struct {
	mock.Mock
}

type AuthzKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthzKeeper) EXPECT() *AuthzKeeper_Expecter {
	return &AuthzKeeper_Expecter{mock: &_m.Mock}
}

// DeleteGrant provides a mock function for the type AuthzKeeper
func (_mock *AuthzKeeper) DeleteGrant(ctx context.Context, grantee types.AccAddress, granter types.AccAddress, msgType string) error {
	ret := _mock.Called(ctx, grantee, granter, msgType)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGrant")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.AccAddress, types.AccAddress, string) error); ok {
		r0 = returnFunc(ctx, grantee, granter, msgType)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthzKeeper_DeleteGrant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGrant'
type AuthzKeeper_DeleteGrant_Call struct {
	*mock.Call
}

// DeleteGrant is a helper method to define mock.On call
//   - ctx context.Context
//   - grantee types.AccAddress
//   - granter types.AccAddress
//   - msgType string
func (_e *AuthzKeeper_Expecter) DeleteGrant(ctx interface{}, grantee interface{}, granter interface{}, msgType interface{}) *AuthzKeeper_DeleteGrant_Call {
	return &AuthzKeeper_DeleteGrant_Call{Call: _e.mock.On("DeleteGrant", ctx, grantee, granter, msgType)}
}

func (_c *AuthzKeeper_DeleteGrant_Call) Run(run func(ctx context.Context, grantee types.AccAddress, granter types.AccAddress, msgType string)) *AuthzKeeper_DeleteGrant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.AccAddress
		if args[1] != nil {
			arg1 = args[1].(types.AccAddress)
		}
		var arg2 types.AccAddress
		if args[2] != nil {
			arg2 = args[2].(types.AccAddress)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *AuthzKeeper_DeleteGrant_Call) Return(err error) *AuthzKeeper_DeleteGrant_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthzKeeper_DeleteGrant_Call) RunAndReturn(run func(ctx context.Context, grantee types.AccAddress, granter types.AccAddress, msgType string) error) *AuthzKeeper_DeleteGrant_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorization provides a mock function for the type AuthzKeeper
func (_mock *AuthzKeeper) GetAuthorization(ctx context.Context, grantee types.AccAddress, granter types.AccAddress, msgType string) (authz.Authorization, *time.Time) {
	ret := _mock.Called(ctx, grantee, granter, msgType)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorization")
	}

	var r0 authz.Authorization
	var r1 *time.Time
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.AccAddress, types.AccAddress, string) (authz.Authorization, *time.Time)); ok {
		return returnFunc(ctx, grantee, granter, msgType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.AccAddress, types.AccAddress, string) authz.Authorization); ok {
		r0 = returnFunc(ctx, grantee, granter, msgType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authz.Authorization)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.AccAddress, types.AccAddress, string) *time.Time); ok {
		r1 = returnFunc(ctx, grantee, granter, msgType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*time.Time)
		}
	}
	return r0, r1
}

// AuthzKeeper_GetAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorization'
type AuthzKeeper_GetAuthorization_Call struct {
	*mock.Call
}

// GetAuthorization is a helper method to define mock.On call
//   - ctx context.Context
//   - grantee types.AccAddress
//   - granter types.AccAddress
//   - msgType string
func (_e *AuthzKeeper_Expecter) GetAuthorization(ctx interface{}, grantee interface{}, granter interface{}, msgType interface{}) *AuthzKeeper_GetAuthorization_Call {
	return &AuthzKeeper_GetAuthorization_Call{Call: _e.mock.On("GetAuthorization", ctx, grantee, granter, msgType)}
}

func (_c *AuthzKeeper_GetAuthorization_Call) Run(run func(ctx context.Context, grantee types.AccAddress, granter types.AccAddress, msgType string)) *AuthzKeeper_GetAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.AccAddress
		if args[1] != nil {
			arg1 = args[1].(types.AccAddress)
		}
		var arg2 types.AccAddress
		if args[2] != nil {
			arg2 = args[2].(types.AccAddress)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *AuthzKeeper_GetAuthorization_Call) Return(authorization authz.Authorization, time1 *time.Time) *AuthzKeeper_GetAuthorization_Call {
	_c.Call.Return(authorization, time1)
	return _c
}

func (_c *AuthzKeeper_GetAuthorization_Call) RunAndReturn(run func(ctx context.Context, grantee types.AccAddress, granter types.AccAddress, msgType string) (authz.Authorization, *time.Time)) *AuthzKeeper_GetAuthorization_Call {
	_c.Call.Return(run)
	return _c
}

// GetGranteeGrantsByMsgType provides a mock function for the type AuthzKeeper
func (_mock *AuthzKeeper) GetGranteeGrantsByMsgType(ctx context.Context, grantee types.AccAddress, msgType string, onGrant keeper.OnGrantFn) {
	_mock.Called(ctx, grantee, msgType, onGrant)
	return
}

// AuthzKeeper_GetGranteeGrantsByMsgType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGranteeGrantsByMsgType'
type AuthzKeeper_GetGranteeGrantsByMsgType_Call struct {
	*mock.Call
}

// GetGranteeGrantsByMsgType is a helper method to define mock.On call
//   - ctx context.Context
//   - grantee types.AccAddress
//   - msgType string
//   - onGrant keeper.OnGrantFn
func (_e *AuthzKeeper_Expecter) GetGranteeGrantsByMsgType(ctx interface{}, grantee interface{}, msgType interface{}, onGrant interface{}) *AuthzKeeper_GetGranteeGrantsByMsgType_Call {
	return &AuthzKeeper_GetGranteeGrantsByMsgType_Call{Call: _e.mock.On("GetGranteeGrantsByMsgType", ctx, grantee, msgType, onGrant)}
}

func (_c *AuthzKeeper_GetGranteeGrantsByMsgType_Call) Run(run func(ctx context.Context, grantee types.AccAddress, msgType string, onGrant keeper.OnGrantFn)) *AuthzKeeper_GetGranteeGrantsByMsgType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.AccAddress
		if args[1] != nil {
			arg1 = args[1].(types.AccAddress)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 keeper.OnGrantFn
		if args[3] != nil {
			arg3 = args[3].(keeper.OnGrantFn)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *AuthzKeeper_GetGranteeGrantsByMsgType_Call) Return() *AuthzKeeper_GetGranteeGrantsByMsgType_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuthzKeeper_GetGranteeGrantsByMsgType_Call) RunAndReturn(run func(ctx context.Context, grantee types.AccAddress, msgType string, onGrant keeper.OnGrantFn)) *AuthzKeeper_GetGranteeGrantsByMsgType_Call {
	_c.Run(run)
	return _c
}

// IterateGrants provides a mock function for the type AuthzKeeper
func (_mock *AuthzKeeper) IterateGrants(ctx context.Context, handler func(granterAddr types.AccAddress, granteeAddr types.AccAddress, grant authz.Grant) bool) {
	_mock.Called(ctx, handler)
	return
}

// AuthzKeeper_IterateGrants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateGrants'
type AuthzKeeper_IterateGrants_Call struct {
	*mock.Call
}

// IterateGrants is a helper method to define mock.On call
//   - ctx context.Context
//   - handler func(granterAddr types.AccAddress, granteeAddr types.AccAddress, grant authz.Grant) bool
func (_e *AuthzKeeper_Expecter) IterateGrants(ctx interface{}, handler interface{}) *AuthzKeeper_IterateGrants_Call {
	return &AuthzKeeper_IterateGrants_Call{Call: _e.mock.On("IterateGrants", ctx, handler)}
}

func (_c *AuthzKeeper_IterateGrants_Call) Run(run func(ctx context.Context, handler func(granterAddr types.AccAddress, granteeAddr types.AccAddress, grant authz.Grant) bool)) *AuthzKeeper_IterateGrants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(granterAddr types.AccAddress, granteeAddr types.AccAddress, grant authz.Grant) bool
		if args[1] != nil {
			arg1 = args[1].(func(granterAddr types.AccAddress, granteeAddr types.AccAddress, grant authz.Grant) bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthzKeeper_IterateGrants_Call) Return() *AuthzKeeper_IterateGrants_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuthzKeeper_IterateGrants_Call) RunAndReturn(run func(ctx context.Context, handler func(granterAddr types.AccAddress, granteeAddr types.AccAddress, grant authz.Grant) bool)) *AuthzKeeper_IterateGrants_Call {
	_c.Run(run)
	return _c
}

// SaveGrant provides a mock function for the type AuthzKeeper
func (_mock *AuthzKeeper) SaveGrant(ctx context.Context, grantee types.AccAddress, granter types.AccAddress, authorization authz.Authorization, expiration *time.Time) error {
	ret := _mock.Called(ctx, grantee, granter, authorization, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SaveGrant")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.AccAddress, types.AccAddress, authz.Authorization, *time.Time) error); ok {
		r0 = returnFunc(ctx, grantee, granter, authorization, expiration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthzKeeper_SaveGrant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveGrant'
type AuthzKeeper_SaveGrant_Call struct {
	*mock.Call
}

// SaveGrant is a helper method to define mock.On call
//   - ctx context.Context
//   - grantee types.AccAddress
//   - granter types.AccAddress
//   - authorization authz.Authorization
//   - expiration *time.Time
func (_e *AuthzKeeper_Expecter) SaveGrant(ctx interface{}, grantee interface{}, granter interface{}, authorization interface{}, expiration interface{}) *AuthzKeeper_SaveGrant_Call {
	return &AuthzKeeper_SaveGrant_Call{Call: _e.mock.On("SaveGrant", ctx, grantee, granter, authorization, expiration)}
}

func (_c *AuthzKeeper_SaveGrant_Call) Run(run func(ctx context.Context, grantee types.AccAddress, granter types.AccAddress, authorization authz.Authorization, expiration *time.Time)) *AuthzKeeper_SaveGrant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.AccAddress
		if args[1] != nil {
			arg1 = args[1].(types.AccAddress)
		}
		var arg2 types.AccAddress
		if args[2] != nil {
			arg2 = args[2].(types.AccAddress)
		}
		var arg3 authz.Authorization
		if args[3] != nil {
			arg3 = args[3].(authz.Authorization)
		}
		var arg4 *time.Time
		if args[4] != nil {
			arg4 = args[4].(*time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *AuthzKeeper_SaveGrant_Call) Return(err error) *AuthzKeeper_SaveGrant_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthzKeeper_SaveGrant_Call) RunAndReturn(run func(ctx context.Context, grantee types.AccAddress, granter types.AccAddress, authorization authz.Authorization, expiration *time.Time) error) *AuthzKeeper_SaveGrant_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery v2.5.1. DO NOT EDIT.

package kubernetes_mocks

import (
	mock "github.com/stretchr/testify/mock"
	fields "k8s.io/apimachinery/pkg/fields"

	runtime "k8s.io/apimachinery/pkg/runtime"

	v1 "k8s.io/api/core/v1"
)

// EventExpansion is an autogenerated mock type for the EventExpansion type
type EventExpansion struct {
	mock.Mock
}

// CreateWithEventNamespace provides a mock function with given fields: event
func (_m *EventExpansion) CreateWithEventNamespace(event *v1.Event) (*v1.Event, error) {
	ret := _m.Called(event)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event) *v1.Event); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFieldSelector provides a mock function with given fields: involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID
func (_m *EventExpansion) GetFieldSelector(involvedObjectName *string, involvedObjectNamespace *string, involvedObjectKind *string, involvedObjectUID *string) fields.Selector {
	ret := _m.Called(involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID)

	var r0 fields.Selector
	if rf, ok := ret.Get(0).(func(*string, *string, *string, *string) fields.Selector); ok {
		r0 = rf(involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fields.Selector)
		}
	}

	return r0
}

// PatchWithEventNamespace provides a mock function with given fields: event, data
func (_m *EventExpansion) PatchWithEventNamespace(event *v1.Event, data []byte) (*v1.Event, error) {
	ret := _m.Called(event, data)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event, []byte) *v1.Event); ok {
		r0 = rf(event, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event, []byte) error); ok {
		r1 = rf(event, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: scheme, objOrRef
func (_m *EventExpansion) Search(scheme *runtime.Scheme, objOrRef runtime.Object) (*v1.EventList, error) {
	ret := _m.Called(scheme, objOrRef)

	var r0 *v1.EventList
	if rf, ok := ret.Get(0).(func(*runtime.Scheme, runtime.Object) *v1.EventList); ok {
		r0 = rf(scheme, objOrRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.EventList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*runtime.Scheme, runtime.Object) error); ok {
		r1 = rf(scheme, objOrRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWithEventNamespace provides a mock function with given fields: event
func (_m *EventExpansion) UpdateWithEventNamespace(event *v1.Event) (*v1.Event, error) {
	ret := _m.Called(event)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event) *v1.Event); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v1.0.0
package mocks

import core_types "github.com/tendermint/tendermint/rpc/core/types"
import keys "github.com/tendermint/go-crypto/keys"
import mock "github.com/stretchr/testify/mock"
import txutil "github.com/ovrclk/akash/txutil"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// BroadcastTxCommit provides a mock function with given fields: tx
func (_m *Client) BroadcastTxCommit(tx interface{}) (*core_types.ResultBroadcastTxCommit, error) {
	ret := _m.Called(tx)

	var r0 *core_types.ResultBroadcastTxCommit
	if rf, ok := ret.Get(0).(func(interface{}) *core_types.ResultBroadcastTxCommit); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core_types.ResultBroadcastTxCommit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Key provides a mock function with given fields:
func (_m *Client) Key() keys.Info {
	ret := _m.Called()

	var r0 keys.Info
	if rf, ok := ret.Get(0).(func() keys.Info); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(keys.Info)
	}

	return r0
}

// Nonce provides a mock function with given fields:
func (_m *Client) Nonce() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signer provides a mock function with given fields:
func (_m *Client) Signer() txutil.Signer {
	ret := _m.Called()

	var r0 txutil.Signer
	if rf, ok := ret.Get(0).(func() txutil.Signer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(txutil.Signer)
		}
	}

	return r0
}

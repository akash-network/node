// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/cert/v1beta2/cert.proto

package v1beta2

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// State is an enum which refers to state of deployment
type Certificate_State int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state
	CertificateStateInvalid Certificate_State = 0
	// CertificateValid denotes state for deployment active
	CertificateValid Certificate_State = 1
	// CertificateRevoked denotes state for deployment closed
	CertificateRevoked Certificate_State = 2
)

var Certificate_State_name = map[int32]string{
	0: "invalid",
	1: "valid",
	2: "revoked",
}

var Certificate_State_value = map[string]int32{
	"invalid": 0,
	"valid":   1,
	"revoked": 2,
}

func (x Certificate_State) String() string {
	return proto.EnumName(Certificate_State_name, int32(x))
}

func (Certificate_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1bfc773547637d6c, []int{1, 0}
}

// CertificateID stores owner and sequence number
type CertificateID struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	Serial string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial" yaml:"serial"`
}

func (m *CertificateID) Reset()      { *m = CertificateID{} }
func (*CertificateID) ProtoMessage() {}
func (*CertificateID) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfc773547637d6c, []int{0}
}
func (m *CertificateID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateID.Merge(m, src)
}
func (m *CertificateID) XXX_Size() int {
	return m.Size()
}
func (m *CertificateID) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateID.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateID proto.InternalMessageInfo

func (m *CertificateID) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CertificateID) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

// Certificate stores state, certificate and it's public key
type Certificate struct {
	State  Certificate_State `protobuf:"varint,2,opt,name=state,proto3,enum=akash.cert.v1beta2.Certificate_State" json:"state" yaml:"state"`
	Cert   []byte            `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert" yaml:"cert"`
	Pubkey []byte            `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfc773547637d6c, []int{1}
}
func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return m.Size()
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetState() Certificate_State {
	if m != nil {
		return m.State
	}
	return CertificateStateInvalid
}

func (m *Certificate) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *Certificate) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

// CertificateFilter defines filters used to filter certificates
type CertificateFilter struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	Serial string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial" yaml:"serial"`
	State  string `protobuf:"bytes,3,opt,name=state,proto3" json:"state" yaml:"state"`
}

func (m *CertificateFilter) Reset()         { *m = CertificateFilter{} }
func (m *CertificateFilter) String() string { return proto.CompactTextString(m) }
func (*CertificateFilter) ProtoMessage()    {}
func (*CertificateFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfc773547637d6c, []int{2}
}
func (m *CertificateFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateFilter.Merge(m, src)
}
func (m *CertificateFilter) XXX_Size() int {
	return m.Size()
}
func (m *CertificateFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateFilter proto.InternalMessageInfo

func (m *CertificateFilter) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CertificateFilter) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *CertificateFilter) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

// MsgCreateCertificate defines an SDK message for creating certificate
type MsgCreateCertificate struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	Cert   []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert" yaml:"cert"`
	Pubkey []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
}

func (m *MsgCreateCertificate) Reset()         { *m = MsgCreateCertificate{} }
func (m *MsgCreateCertificate) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCertificate) ProtoMessage()    {}
func (*MsgCreateCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfc773547637d6c, []int{3}
}
func (m *MsgCreateCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCertificate.Merge(m, src)
}
func (m *MsgCreateCertificate) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCertificate proto.InternalMessageInfo

func (m *MsgCreateCertificate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreateCertificate) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *MsgCreateCertificate) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

// MsgCreateCertificateResponse defines the Msg/CreateCertificate response type.
type MsgCreateCertificateResponse struct {
}

func (m *MsgCreateCertificateResponse) Reset()         { *m = MsgCreateCertificateResponse{} }
func (m *MsgCreateCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCertificateResponse) ProtoMessage()    {}
func (*MsgCreateCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfc773547637d6c, []int{4}
}
func (m *MsgCreateCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCertificateResponse.Merge(m, src)
}
func (m *MsgCreateCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCertificateResponse proto.InternalMessageInfo

// MsgRevokeCertificate defines an SDK message for revoking certificate
type MsgRevokeCertificate struct {
	ID CertificateID `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
}

func (m *MsgRevokeCertificate) Reset()         { *m = MsgRevokeCertificate{} }
func (m *MsgRevokeCertificate) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeCertificate) ProtoMessage()    {}
func (*MsgRevokeCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfc773547637d6c, []int{5}
}
func (m *MsgRevokeCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeCertificate.Merge(m, src)
}
func (m *MsgRevokeCertificate) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeCertificate proto.InternalMessageInfo

func (m *MsgRevokeCertificate) GetID() CertificateID {
	if m != nil {
		return m.ID
	}
	return CertificateID{}
}

// MsgRevokeCertificateResponse defines the Msg/RevokeCertificate response type.
type MsgRevokeCertificateResponse struct {
}

func (m *MsgRevokeCertificateResponse) Reset()         { *m = MsgRevokeCertificateResponse{} }
func (m *MsgRevokeCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevokeCertificateResponse) ProtoMessage()    {}
func (*MsgRevokeCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfc773547637d6c, []int{6}
}
func (m *MsgRevokeCertificateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevokeCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevokeCertificateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevokeCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevokeCertificateResponse.Merge(m, src)
}
func (m *MsgRevokeCertificateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevokeCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevokeCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevokeCertificateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("akash.cert.v1beta2.Certificate_State", Certificate_State_name, Certificate_State_value)
	proto.RegisterType((*CertificateID)(nil), "akash.cert.v1beta2.CertificateID")
	proto.RegisterType((*Certificate)(nil), "akash.cert.v1beta2.Certificate")
	proto.RegisterType((*CertificateFilter)(nil), "akash.cert.v1beta2.CertificateFilter")
	proto.RegisterType((*MsgCreateCertificate)(nil), "akash.cert.v1beta2.MsgCreateCertificate")
	proto.RegisterType((*MsgCreateCertificateResponse)(nil), "akash.cert.v1beta2.MsgCreateCertificateResponse")
	proto.RegisterType((*MsgRevokeCertificate)(nil), "akash.cert.v1beta2.MsgRevokeCertificate")
	proto.RegisterType((*MsgRevokeCertificateResponse)(nil), "akash.cert.v1beta2.MsgRevokeCertificateResponse")
}

func init() { proto.RegisterFile("akash/cert/v1beta2/cert.proto", fileDescriptor_1bfc773547637d6c) }

var fileDescriptor_1bfc773547637d6c = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xc1, 0x6b, 0x13, 0x4f,
	0x14, 0xde, 0xdd, 0x24, 0xed, 0xaf, 0x93, 0xf6, 0x47, 0xba, 0x04, 0x1b, 0xb7, 0x76, 0x27, 0x8e,
	0x08, 0x01, 0x71, 0x57, 0xd3, 0x5b, 0x8e, 0x69, 0x10, 0x02, 0x16, 0x64, 0x85, 0x1e, 0xbc, 0x6d,
	0xb2, 0x63, 0x3a, 0x24, 0xdd, 0x09, 0xbb, 0xd3, 0xd4, 0x1c, 0xc4, 0xab, 0xe4, 0xe4, 0xd1, 0x4b,
	0xa0, 0xe0, 0x1f, 0xa0, 0x7f, 0x85, 0xf4, 0xd8, 0xa3, 0xa7, 0x45, 0x92, 0x83, 0x92, 0x63, 0xfe,
	0x02, 0xd9, 0x37, 0x09, 0x59, 0x49, 0xa2, 0xed, 0xc5, 0xdb, 0xbe, 0xf7, 0x7d, 0x33, 0xef, 0xfb,
	0xf6, 0x1b, 0x1e, 0x3a, 0x70, 0xdb, 0x6e, 0x78, 0x6a, 0x37, 0x69, 0x20, 0xec, 0xde, 0xd3, 0x06,
	0x15, 0x6e, 0x19, 0x0a, 0xab, 0x1b, 0x70, 0xc1, 0x75, 0x1d, 0x60, 0x0b, 0x3a, 0x33, 0xd8, 0xc8,
	0xb7, 0x78, 0x8b, 0x03, 0x6c, 0xc7, 0x5f, 0x92, 0x49, 0xde, 0xa1, 0x9d, 0x23, 0x1a, 0x08, 0xf6,
	0x9a, 0x35, 0x5d, 0x41, 0xeb, 0x35, 0xdd, 0x46, 0x19, 0x7e, 0xe1, 0xd3, 0xa0, 0xa0, 0x16, 0xd5,
	0xd2, 0x56, 0xf5, 0xee, 0x24, 0xc2, 0xb2, 0x31, 0x8d, 0xf0, 0x76, 0xdf, 0x3d, 0xeb, 0x54, 0x08,
	0x94, 0xc4, 0x91, 0x6d, 0xfd, 0x10, 0x6d, 0x84, 0x34, 0x60, 0x6e, 0xa7, 0xa0, 0xc1, 0x89, 0xfd,
	0x49, 0x84, 0x67, 0x9d, 0x69, 0x84, 0x77, 0xe4, 0x11, 0x59, 0x13, 0x67, 0x06, 0x54, 0xfe, 0xfb,
	0x78, 0x89, 0x95, 0x9f, 0x97, 0x58, 0x21, 0x5f, 0x35, 0x94, 0x4d, 0x28, 0xd0, 0x4f, 0x50, 0x26,
	0x14, 0xae, 0xa0, 0x70, 0xdb, 0xff, 0xe5, 0x87, 0xd6, 0xb2, 0x15, 0x2b, 0xc1, 0xb7, 0x5e, 0xc6,
	0x64, 0x29, 0x13, 0xce, 0x2d, 0x64, 0x42, 0x49, 0x1c, 0xd9, 0xd6, 0x1f, 0xa1, 0x74, 0x7c, 0x47,
	0x21, 0x55, 0x54, 0x4b, 0xdb, 0xd5, 0xbd, 0x49, 0x84, 0xa1, 0x9e, 0x46, 0x38, 0x2b, 0xe9, 0x71,
	0x45, 0x1c, 0x68, 0xc6, 0x9e, 0xba, 0xe7, 0x8d, 0x36, 0xed, 0x17, 0xd2, 0x40, 0x07, 0x4f, 0xb2,
	0xb3, 0xf0, 0x24, 0x6b, 0xe2, 0xcc, 0x00, 0xf2, 0x16, 0x65, 0x40, 0x8c, 0x5e, 0x42, 0x9b, 0xcc,
	0xef, 0xb9, 0x1d, 0xe6, 0xe5, 0x14, 0x63, 0x7f, 0x30, 0x2c, 0xee, 0x25, 0x04, 0x03, 0xa5, 0x2e,
	0x61, 0x1d, 0xa3, 0x8c, 0xe4, 0xa9, 0x46, 0x7e, 0x30, 0x2c, 0xe6, 0x12, 0xbc, 0x13, 0x20, 0x3c,
	0x40, 0x9b, 0x01, 0xed, 0xf1, 0x36, 0xf5, 0x72, 0x9a, 0x71, 0x67, 0x30, 0x2c, 0xea, 0x09, 0x8a,
	0x23, 0x11, 0x23, 0xfd, 0xfe, 0x93, 0xa9, 0x90, 0x2f, 0x2a, 0xda, 0x4d, 0x80, 0xcf, 0x58, 0x47,
	0xd0, 0xe0, 0xdf, 0xc4, 0x19, 0x4f, 0x91, 0xa1, 0xa5, 0x16, 0x53, 0xfe, 0x94, 0x46, 0x25, 0x0d,
	0xd9, 0x7f, 0x56, 0x51, 0xfe, 0x38, 0x6c, 0x1d, 0x05, 0xd4, 0x15, 0x34, 0xf9, 0x08, 0x6e, 0xad,
	0x7a, 0x9e, 0xae, 0x76, 0xbb, 0x74, 0x53, 0x37, 0x4e, 0x77, 0xa6, 0xd8, 0x44, 0xf7, 0x56, 0x09,
	0x76, 0x68, 0xd8, 0xe5, 0x7e, 0x48, 0x89, 0x0f, 0x86, 0x64, 0x30, 0x49, 0x43, 0x2f, 0x90, 0xc6,
	0x3c, 0x70, 0x93, 0x2d, 0xdf, 0xff, 0xcb, 0x93, 0xae, 0xd7, 0xaa, 0x07, 0x57, 0x11, 0x56, 0x46,
	0x11, 0xd6, 0xea, 0xb5, 0x49, 0x84, 0x35, 0xe6, 0x4d, 0x23, 0xbc, 0x25, 0x75, 0x31, 0x8f, 0x38,
	0x1a, 0xf3, 0x7e, 0xd3, 0xb3, 0x34, 0x6f, 0xae, 0xa7, 0xfc, 0x43, 0x45, 0xa9, 0xe3, 0xb0, 0xa5,
	0x73, 0xb4, 0xbb, 0xfc, 0x97, 0x4b, 0xab, 0x84, 0xac, 0xb2, 0x67, 0x3c, 0xb9, 0x29, 0x73, 0x3e,
	0x38, 0x1e, 0xb8, 0xfc, 0x17, 0xd6, 0x0d, 0x5c, 0x62, 0xae, 0x1d, 0xb8, 0xd6, 0x69, 0xf5, 0xf9,
	0xd5, 0xc8, 0x54, 0xaf, 0x47, 0xa6, 0xfa, 0x7d, 0x64, 0xaa, 0x1f, 0xc6, 0xa6, 0x72, 0x3d, 0x36,
	0x95, 0x6f, 0x63, 0x53, 0x79, 0x55, 0x6e, 0x31, 0x71, 0x7a, 0xde, 0xb0, 0x9a, 0xfc, 0xcc, 0x86,
	0x5b, 0x1f, 0xfb, 0x54, 0x5c, 0xf0, 0xa0, 0x6d, 0xfb, 0xdc, 0xa3, 0xf6, 0x1b, 0xb9, 0x45, 0x45,
	0xbf, 0x4b, 0xc3, 0xf9, 0x2e, 0x6d, 0x6c, 0xc0, 0x76, 0x3c, 0xfc, 0x15, 0x00, 0x00, 0xff, 0xff,
	0x24, 0x1c, 0xbe, 0x00, 0x68, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateCertificate defines a method to create new certificate given proper inputs.
	CreateCertificate(ctx context.Context, in *MsgCreateCertificate, opts ...grpc.CallOption) (*MsgCreateCertificateResponse, error)
	// RevokeCertificate defines a method to revoke the certificate
	RevokeCertificate(ctx context.Context, in *MsgRevokeCertificate, opts ...grpc.CallOption) (*MsgRevokeCertificateResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCertificate(ctx context.Context, in *MsgCreateCertificate, opts ...grpc.CallOption) (*MsgCreateCertificateResponse, error) {
	out := new(MsgCreateCertificateResponse)
	err := c.cc.Invoke(ctx, "/akash.cert.v1beta2.Msg/CreateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeCertificate(ctx context.Context, in *MsgRevokeCertificate, opts ...grpc.CallOption) (*MsgRevokeCertificateResponse, error) {
	out := new(MsgRevokeCertificateResponse)
	err := c.cc.Invoke(ctx, "/akash.cert.v1beta2.Msg/RevokeCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateCertificate defines a method to create new certificate given proper inputs.
	CreateCertificate(context.Context, *MsgCreateCertificate) (*MsgCreateCertificateResponse, error)
	// RevokeCertificate defines a method to revoke the certificate
	RevokeCertificate(context.Context, *MsgRevokeCertificate) (*MsgRevokeCertificateResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCertificate(ctx context.Context, req *MsgCreateCertificate) (*MsgCreateCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificate not implemented")
}
func (*UnimplementedMsgServer) RevokeCertificate(ctx context.Context, req *MsgRevokeCertificate) (*MsgRevokeCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCertificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.cert.v1beta2.Msg/CreateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCertificate(ctx, req.(*MsgCreateCertificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeCertificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.cert.v1beta2.Msg/RevokeCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeCertificate(ctx, req.(*MsgRevokeCertificate))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "akash.cert.v1beta2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCertificate",
			Handler:    _Msg_CreateCertificate_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _Msg_RevokeCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "akash/cert/v1beta2/cert.proto",
}

func (m *CertificateID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Serial) > 0 {
		i -= len(m.Serial)
		copy(dAtA[i:], m.Serial)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Serial)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintCert(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *CertificateFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintCert(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Serial) > 0 {
		i -= len(m.Serial)
		copy(dAtA[i:], m.Serial)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Serial)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRevokeCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeCertificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeCertificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCert(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgRevokeCertificateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevokeCertificateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevokeCertificateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintCert(dAtA []byte, offset int, v uint64) int {
	offset -= sovCert(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CertificateID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Serial)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *Certificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovCert(uint64(m.State))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *CertificateFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Serial)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *MsgCreateCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *MsgCreateCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRevokeCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovCert(uint64(l))
	return n
}

func (m *MsgRevokeCertificateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovCert(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCert(x uint64) (n int) {
	return sovCert(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CertificateID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Certificate_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevokeCertificateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevokeCertificateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevokeCertificateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCert(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCert
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCert
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCert
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCert
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCert        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCert          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCert = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	authz "github.com/cosmos/cosmos-sdk/x/authz"

	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/cosmos/cosmos-sdk/types"
)

// AuthzKeeper is an autogenerated mock type for the AuthzKeeper type
type AuthzKeeper struct {
	mock.Mock
}

// DeleteGrant provides a mock function with given fields: ctx, grantee, granter, msgType
func (_m *AuthzKeeper) DeleteGrant(ctx types.Context, grantee types.AccAddress, granter types.AccAddress, msgType string) error {
	ret := _m.Called(ctx, grantee, granter, msgType)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress, types.AccAddress, string) error); ok {
		r0 = rf(ctx, grantee, granter, msgType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCleanAuthorization provides a mock function with given fields: ctx, grantee, granter, msgType
func (_m *AuthzKeeper) GetCleanAuthorization(ctx types.Context, grantee types.AccAddress, granter types.AccAddress, msgType string) (authz.Authorization, time.Time) {
	ret := _m.Called(ctx, grantee, granter, msgType)

	var r0 authz.Authorization
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress, types.AccAddress, string) authz.Authorization); ok {
		r0 = rf(ctx, grantee, granter, msgType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authz.Authorization)
		}
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(types.Context, types.AccAddress, types.AccAddress, string) time.Time); ok {
		r1 = rf(ctx, grantee, granter, msgType)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	return r0, r1
}

// SaveGrant provides a mock function with given fields: ctx, grantee, granter, authorization, expiration
func (_m *AuthzKeeper) SaveGrant(ctx types.Context, grantee types.AccAddress, granter types.AccAddress, authorization authz.Authorization, expiration time.Time) error {
	ret := _m.Called(ctx, grantee, granter, authorization, expiration)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress, types.AccAddress, authz.Authorization, time.Time) error); ok {
		r0 = rf(ctx, grantee, granter, authorization, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/deployment/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/ovrclk/akash/x/escrow/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeploymentInfo struct {
	Deployment    Deployment    `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment"`
	EscrowAccount types.Account `protobuf:"bytes,2,opt,name=escrow_account,json=escrowAccount,proto3" json:"escrow_account"`
}

func (m *DeploymentInfo) Reset()         { *m = DeploymentInfo{} }
func (m *DeploymentInfo) String() string { return proto.CompactTextString(m) }
func (*DeploymentInfo) ProtoMessage()    {}
func (*DeploymentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e9d5676377f9641, []int{0}
}
func (m *DeploymentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentInfo.Merge(m, src)
}
func (m *DeploymentInfo) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentInfo proto.InternalMessageInfo

func (m *DeploymentInfo) GetDeployment() Deployment {
	if m != nil {
		return m.Deployment
	}
	return Deployment{}
}

func (m *DeploymentInfo) GetEscrowAccount() types.Account {
	if m != nil {
		return m.EscrowAccount
	}
	return types.Account{}
}

// QueryDeploymentsRequest is request type for the Query/Deployments RPC method
type QueryDeploymentsRequest struct {
	Filters    DeploymentFilters  `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDeploymentsRequest) Reset()         { *m = QueryDeploymentsRequest{} }
func (m *QueryDeploymentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDeploymentsRequest) ProtoMessage()    {}
func (*QueryDeploymentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e9d5676377f9641, []int{1}
}
func (m *QueryDeploymentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeploymentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeploymentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeploymentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeploymentsRequest.Merge(m, src)
}
func (m *QueryDeploymentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeploymentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeploymentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeploymentsRequest proto.InternalMessageInfo

func (m *QueryDeploymentsRequest) GetFilters() DeploymentFilters {
	if m != nil {
		return m.Filters
	}
	return DeploymentFilters{}
}

func (m *QueryDeploymentsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDeploymentsResponse is response type for the Query/Deployments RPC method
type QueryDeploymentsResponse struct {
	Deployments DeploymentResponses `protobuf:"bytes,1,rep,name=deployments,proto3,castrepeated=DeploymentResponses" json:"deployments"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDeploymentsResponse) Reset()         { *m = QueryDeploymentsResponse{} }
func (m *QueryDeploymentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDeploymentsResponse) ProtoMessage()    {}
func (*QueryDeploymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e9d5676377f9641, []int{2}
}
func (m *QueryDeploymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeploymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeploymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeploymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeploymentsResponse.Merge(m, src)
}
func (m *QueryDeploymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeploymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeploymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeploymentsResponse proto.InternalMessageInfo

func (m *QueryDeploymentsResponse) GetDeployments() DeploymentResponses {
	if m != nil {
		return m.Deployments
	}
	return nil
}

func (m *QueryDeploymentsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDeploymentRequest is request type for the Query/Deployment RPC method
type QueryDeploymentRequest struct {
	ID DeploymentID `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (m *QueryDeploymentRequest) Reset()         { *m = QueryDeploymentRequest{} }
func (m *QueryDeploymentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDeploymentRequest) ProtoMessage()    {}
func (*QueryDeploymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e9d5676377f9641, []int{3}
}
func (m *QueryDeploymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeploymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeploymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeploymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeploymentRequest.Merge(m, src)
}
func (m *QueryDeploymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeploymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeploymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeploymentRequest proto.InternalMessageInfo

func (m *QueryDeploymentRequest) GetID() DeploymentID {
	if m != nil {
		return m.ID
	}
	return DeploymentID{}
}

// QueryDeploymentResponse is response type for the Query/Deployment RPC method
type QueryDeploymentResponse struct {
	Deployment    DeploymentResponse `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment"`
	EscrowAccount types.Account      `protobuf:"bytes,2,opt,name=escrow_account,json=escrowAccount,proto3" json:"escrow_account"`
}

func (m *QueryDeploymentResponse) Reset()         { *m = QueryDeploymentResponse{} }
func (m *QueryDeploymentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDeploymentResponse) ProtoMessage()    {}
func (*QueryDeploymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e9d5676377f9641, []int{4}
}
func (m *QueryDeploymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeploymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeploymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeploymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeploymentResponse.Merge(m, src)
}
func (m *QueryDeploymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeploymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeploymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeploymentResponse proto.InternalMessageInfo

func (m *QueryDeploymentResponse) GetDeployment() DeploymentResponse {
	if m != nil {
		return m.Deployment
	}
	return DeploymentResponse{}
}

func (m *QueryDeploymentResponse) GetEscrowAccount() types.Account {
	if m != nil {
		return m.EscrowAccount
	}
	return types.Account{}
}

// QueryGroupRequest is request type for the Query/Group RPC method
type QueryGroupRequest struct {
	ID GroupID `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (m *QueryGroupRequest) Reset()         { *m = QueryGroupRequest{} }
func (m *QueryGroupRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGroupRequest) ProtoMessage()    {}
func (*QueryGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e9d5676377f9641, []int{5}
}
func (m *QueryGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupRequest.Merge(m, src)
}
func (m *QueryGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupRequest proto.InternalMessageInfo

func (m *QueryGroupRequest) GetID() GroupID {
	if m != nil {
		return m.ID
	}
	return GroupID{}
}

// QueryGroupResponse is response type for the Query/Group RPC method
type QueryGroupResponse struct {
	Group Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group"`
}

func (m *QueryGroupResponse) Reset()         { *m = QueryGroupResponse{} }
func (m *QueryGroupResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGroupResponse) ProtoMessage()    {}
func (*QueryGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e9d5676377f9641, []int{6}
}
func (m *QueryGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupResponse.Merge(m, src)
}
func (m *QueryGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupResponse proto.InternalMessageInfo

func (m *QueryGroupResponse) GetGroup() Group {
	if m != nil {
		return m.Group
	}
	return Group{}
}

func init() {
	proto.RegisterType((*DeploymentInfo)(nil), "akash.deployment.v1beta1.DeploymentInfo")
	proto.RegisterType((*QueryDeploymentsRequest)(nil), "akash.deployment.v1beta1.QueryDeploymentsRequest")
	proto.RegisterType((*QueryDeploymentsResponse)(nil), "akash.deployment.v1beta1.QueryDeploymentsResponse")
	proto.RegisterType((*QueryDeploymentRequest)(nil), "akash.deployment.v1beta1.QueryDeploymentRequest")
	proto.RegisterType((*QueryDeploymentResponse)(nil), "akash.deployment.v1beta1.QueryDeploymentResponse")
	proto.RegisterType((*QueryGroupRequest)(nil), "akash.deployment.v1beta1.QueryGroupRequest")
	proto.RegisterType((*QueryGroupResponse)(nil), "akash.deployment.v1beta1.QueryGroupResponse")
}

func init() {
	proto.RegisterFile("akash/deployment/v1beta1/query.proto", fileDescriptor_5e9d5676377f9641)
}

var fileDescriptor_5e9d5676377f9641 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x9b, 0x8e, 0x81, 0xf4, 0x55, 0x4c, 0xc2, 0x20, 0xa8, 0x0a, 0xa4, 0xa3, 0x1a, 0xdb,
	0xd8, 0x46, 0x4c, 0xcb, 0x11, 0x71, 0xa0, 0xaa, 0x36, 0x75, 0x5c, 0x58, 0x8e, 0x08, 0x09, 0xa5,
	0xa9, 0x97, 0x45, 0x6d, 0xe3, 0x2c, 0x76, 0x07, 0xbd, 0xf2, 0x04, 0x20, 0x9e, 0x01, 0x69, 0xe2,
	0xc0, 0x9d, 0x37, 0xd8, 0xb1, 0x12, 0x17, 0x4e, 0x03, 0xb5, 0x9c, 0x79, 0x06, 0x14, 0xdb, 0x69,
	0x02, 0x6d, 0x68, 0x8a, 0xc4, 0xad, 0xaa, 0xff, 0xdf, 0xff, 0xfb, 0x7d, 0x7f, 0xdb, 0x31, 0xac,
	0x59, 0x1d, 0x8b, 0x1d, 0xe1, 0x36, 0xf1, 0xbb, 0x74, 0xd0, 0x23, 0x1e, 0xc7, 0x27, 0xd5, 0x16,
	0xe1, 0x56, 0x15, 0x1f, 0xf7, 0x49, 0x30, 0x30, 0xfc, 0x80, 0x72, 0x8a, 0x8a, 0x42, 0x65, 0xc4,
	0x2a, 0x43, 0xa9, 0x4a, 0xd7, 0x1c, 0xea, 0x50, 0x21, 0xc2, 0xe1, 0x2f, 0xa9, 0x2f, 0xdd, 0x72,
	0x28, 0x75, 0xba, 0x04, 0x5b, 0xbe, 0x8b, 0x2d, 0xcf, 0xa3, 0xdc, 0xe2, 0x2e, 0xf5, 0x98, 0x5a,
	0xdd, 0xb2, 0x29, 0xeb, 0x51, 0x86, 0x5b, 0x16, 0x23, 0xb2, 0xcd, 0xa4, 0xa9, 0x6f, 0x39, 0xae,
	0x27, 0xc4, 0x4a, 0x7b, 0x2f, 0x95, 0x2f, 0x01, 0x23, 0xa5, 0xe9, 0xa3, 0x38, 0x01, 0xed, 0xfb,
	0x4a, 0xb5, 0x2a, 0x55, 0x84, 0xd9, 0x01, 0x7d, 0x35, 0x51, 0xf0, 0x81, 0x4f, 0x14, 0x5e, 0xe5,
	0x54, 0x83, 0x95, 0xc6, 0xc4, 0xa4, 0xe9, 0x1d, 0x52, 0xb4, 0x0f, 0x10, 0xdb, 0x16, 0xb5, 0x55,
	0x6d, 0xb3, 0x50, 0x5b, 0x33, 0xd2, 0x42, 0x31, 0xe2, 0xea, 0xfa, 0x85, 0xb3, 0xf3, 0x72, 0xce,
	0x4c, 0x54, 0xa3, 0x7d, 0x58, 0x91, 0xcd, 0x5f, 0x5a, 0xb6, 0x4d, 0xfb, 0x1e, 0x2f, 0xe6, 0x85,
	0xdf, 0x6d, 0xe5, 0x27, 0x17, 0x27, 0x5e, 0x4f, 0xa4, 0x48, 0x19, 0x5d, 0x96, 0xab, 0xea, 0xcf,
	0xca, 0x27, 0x0d, 0x6e, 0x1c, 0x84, 0x01, 0xc6, 0x1d, 0x99, 0x49, 0x8e, 0xfb, 0x84, 0x71, 0xf4,
	0x14, 0x2e, 0x1d, 0xba, 0x5d, 0x4e, 0x02, 0xa6, 0x80, 0xb7, 0xb3, 0x00, 0xef, 0xca, 0x12, 0xd5,
	0x2e, 0x72, 0x40, 0xbb, 0x00, 0xf1, 0xd6, 0x28, 0xe0, 0x75, 0x43, 0xee, 0xa3, 0x11, 0xee, 0xa3,
	0x21, 0x8f, 0x4b, 0x64, 0xf8, 0xcc, 0x72, 0x88, 0x02, 0x31, 0x13, 0x95, 0x95, 0xa1, 0x06, 0xc5,
	0x69, 0x60, 0xe6, 0x53, 0x8f, 0x11, 0xd4, 0x81, 0x42, 0xcc, 0x16, 0x52, 0x2f, 0x6d, 0x16, 0x6a,
	0x3b, 0x59, 0xa8, 0x23, 0x8b, 0xfa, 0xcd, 0x10, 0xfb, 0xe3, 0xb7, 0xf2, 0xd5, 0xe9, 0x35, 0x66,
	0x26, 0xdd, 0xd1, 0xde, 0x8c, 0x89, 0x36, 0xe6, 0x4e, 0x24, 0xad, 0x7e, 0x1b, 0xe9, 0x05, 0x5c,
	0xff, 0x63, 0xa2, 0x68, 0x07, 0xea, 0x90, 0x77, 0xdb, 0x2a, 0xfc, 0xf5, 0x2c, 0x63, 0x34, 0x1b,
	0x75, 0x08, 0x07, 0x18, 0x9d, 0x97, 0xf3, 0xcd, 0x86, 0x99, 0x77, 0xdb, 0x95, 0xcf, 0xd3, 0x3b,
	0x3c, 0xc9, 0xcb, 0x9c, 0x71, 0x2a, 0x17, 0x8b, 0xeb, 0xff, 0x9e, 0x4e, 0x13, 0xae, 0x08, 0xf4,
	0xbd, 0xf0, 0xfa, 0x45, 0xa1, 0x3c, 0x4e, 0x84, 0x72, 0x27, 0x1d, 0x56, 0xd4, 0xcc, 0xc8, 0xe3,
	0x00, 0x50, 0xd2, 0x53, 0x25, 0xf1, 0x08, 0x96, 0xc5, 0x1d, 0x57, 0xbe, 0xe5, 0x39, 0xbe, 0x0a,
	0x57, 0xd6, 0xd4, 0x7e, 0x2e, 0xc1, 0xb2, 0xf0, 0x44, 0xa7, 0x1a, 0x14, 0x12, 0x07, 0x13, 0x55,
	0xd3, 0x7d, 0x52, 0x6e, 0x5d, 0xa9, 0xb6, 0x48, 0x89, 0xa4, 0xaf, 0xd4, 0xde, 0x7c, 0xf9, 0xf1,
	0x3e, 0xbf, 0x83, 0xb6, 0x70, 0x86, 0x8f, 0x1d, 0xc3, 0x5d, 0x97, 0x71, 0xf4, 0x41, 0x03, 0x88,
	0xbd, 0xd0, 0x83, 0xcc, 0x6d, 0x23, 0xd0, 0xea, 0x02, 0x15, 0xff, 0xc6, 0xe9, 0x86, 0x5f, 0xce,
	0x77, 0x1a, 0x2c, 0x8b, 0xcc, 0xd1, 0xf6, 0x9c, 0x86, 0xc9, 0x53, 0x52, 0xda, 0xc9, 0x26, 0x56,
	0x60, 0xf7, 0x05, 0xd8, 0x06, 0xba, 0x8b, 0xff, 0xfe, 0x04, 0x48, 0xa6, 0x7a, 0xe3, 0x6c, 0xa4,
	0x6b, 0xc3, 0x91, 0xae, 0x7d, 0x1f, 0xe9, 0xda, 0xdb, 0xb1, 0x9e, 0x1b, 0x8e, 0xf5, 0xdc, 0xd7,
	0xb1, 0x9e, 0x7b, 0xbe, 0xe5, 0xb8, 0xfc, 0xa8, 0xdf, 0x32, 0x6c, 0xda, 0xc3, 0xf4, 0x24, 0xb0,
	0xbb, 0x1d, 0xe5, 0xf8, 0x3a, 0xe9, 0x29, 0x1e, 0x8b, 0xd6, 0x45, 0xf1, 0x5a, 0x3c, 0xfc, 0x15,
	0x00, 0x00, 0xff, 0xff, 0xca, 0xd3, 0xef, 0x23, 0x42, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Deployments queries deployments
	Deployments(ctx context.Context, in *QueryDeploymentsRequest, opts ...grpc.CallOption) (*QueryDeploymentsResponse, error)
	// Deployment queries deployment details
	Deployment(ctx context.Context, in *QueryDeploymentRequest, opts ...grpc.CallOption) (*QueryDeploymentResponse, error)
	// Group queries group details
	Group(ctx context.Context, in *QueryGroupRequest, opts ...grpc.CallOption) (*QueryGroupResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Deployments(ctx context.Context, in *QueryDeploymentsRequest, opts ...grpc.CallOption) (*QueryDeploymentsResponse, error) {
	out := new(QueryDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/akash.deployment.v1beta1.Query/Deployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Deployment(ctx context.Context, in *QueryDeploymentRequest, opts ...grpc.CallOption) (*QueryDeploymentResponse, error) {
	out := new(QueryDeploymentResponse)
	err := c.cc.Invoke(ctx, "/akash.deployment.v1beta1.Query/Deployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Group(ctx context.Context, in *QueryGroupRequest, opts ...grpc.CallOption) (*QueryGroupResponse, error) {
	out := new(QueryGroupResponse)
	err := c.cc.Invoke(ctx, "/akash.deployment.v1beta1.Query/Group", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Deployments queries deployments
	Deployments(context.Context, *QueryDeploymentsRequest) (*QueryDeploymentsResponse, error)
	// Deployment queries deployment details
	Deployment(context.Context, *QueryDeploymentRequest) (*QueryDeploymentResponse, error)
	// Group queries group details
	Group(context.Context, *QueryGroupRequest) (*QueryGroupResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Deployments(ctx context.Context, req *QueryDeploymentsRequest) (*QueryDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deployments not implemented")
}
func (*UnimplementedQueryServer) Deployment(ctx context.Context, req *QueryDeploymentRequest) (*QueryDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deployment not implemented")
}
func (*UnimplementedQueryServer) Group(ctx context.Context, req *QueryGroupRequest) (*QueryGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Group not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Deployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.deployment.v1beta1.Query/Deployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deployments(ctx, req.(*QueryDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.deployment.v1beta1.Query/Deployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deployment(ctx, req.(*QueryDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Group_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Group(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.deployment.v1beta1.Query/Group",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Group(ctx, req.(*QueryGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "akash.deployment.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deployments",
			Handler:    _Query_Deployments_Handler,
		},
		{
			MethodName: "Deployment",
			Handler:    _Query_Deployment_Handler,
		},
		{
			MethodName: "Group",
			Handler:    _Query_Group_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "akash/deployment/v1beta1/query.proto",
}

func (m *DeploymentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EscrowAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Deployment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDeploymentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeploymentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeploymentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Filters.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDeploymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeploymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeploymentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deployments) > 0 {
		for iNdEx := len(m.Deployments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deployments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeploymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeploymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeploymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDeploymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeploymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeploymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EscrowAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Deployment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeploymentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deployment.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EscrowAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDeploymentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Filters.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDeploymentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDeploymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDeploymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deployment.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EscrowAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Group.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeploymentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deployment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EscrowAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeploymentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeploymentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeploymentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Filters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeploymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeploymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeploymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, DeploymentResponse{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeploymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeploymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeploymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeploymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeploymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeploymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deployment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EscrowAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

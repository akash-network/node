// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/deployment/v1beta2/group.proto

package v1beta2

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// State is an enum which refers to state of group
type Group_State int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state
	GroupStateInvalid Group_State = 0
	// GroupOpen denotes state for group open
	GroupOpen Group_State = 1
	// GroupOrdered denotes state for group ordered
	GroupPaused Group_State = 2
	// GroupInsufficientFunds denotes state for group insufficient_funds
	GroupInsufficientFunds Group_State = 3
	// GroupClosed denotes state for group closed
	GroupClosed Group_State = 4
)

var Group_State_name = map[int32]string{
	0: "invalid",
	1: "open",
	2: "paused",
	3: "insufficient_funds",
	4: "closed",
}

var Group_State_value = map[string]int32{
	"invalid":            0,
	"open":               1,
	"paused":             2,
	"insufficient_funds": 3,
	"closed":             4,
}

func (x Group_State) String() string {
	return proto.EnumName(Group_State_name, int32(x))
}

func (Group_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_60637d8fd815b0bf, []int{0, 0}
}

// Group stores group id, state and specifications of group
type Group struct {
	GroupID   GroupID     `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"id" yaml:"id"`
	State     Group_State `protobuf:"varint,2,opt,name=state,proto3,enum=akash.deployment.v1beta2.Group_State" json:"state" yaml:"state"`
	GroupSpec GroupSpec   `protobuf:"bytes,3,opt,name=group_spec,json=groupSpec,proto3" json:"spec" yaml:"spec"`
	CreatedAt int64       `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_60637d8fd815b0bf, []int{0}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetGroupID() GroupID {
	if m != nil {
		return m.GroupID
	}
	return GroupID{}
}

func (m *Group) GetState() Group_State {
	if m != nil {
		return m.State
	}
	return GroupStateInvalid
}

func (m *Group) GetGroupSpec() GroupSpec {
	if m != nil {
		return m.GroupSpec
	}
	return GroupSpec{}
}

func (m *Group) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto.RegisterEnum("akash.deployment.v1beta2.Group_State", Group_State_name, Group_State_value)
	proto.RegisterType((*Group)(nil), "akash.deployment.v1beta2.Group")
}

func init() {
	proto.RegisterFile("akash/deployment/v1beta2/group.proto", fileDescriptor_60637d8fd815b0bf)
}

var fileDescriptor_60637d8fd815b0bf = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xbd, 0x8e, 0xd3, 0x4e,
	0x14, 0xc5, 0xed, 0xc4, 0xd9, 0xfc, 0x33, 0xf9, 0x03, 0x61, 0xc4, 0x87, 0xf1, 0x0a, 0xdb, 0x98,
	0x0f, 0xa5, 0xc1, 0x16, 0xa1, 0x41, 0xdb, 0x11, 0x10, 0x28, 0x15, 0xc8, 0x2b, 0x51, 0xd0, 0x04,
	0xc7, 0x33, 0xf1, 0x8e, 0x36, 0x99, 0x19, 0xc5, 0xe3, 0x85, 0xb4, 0x54, 0x28, 0x15, 0x2f, 0x10,
	0x09, 0x89, 0x97, 0xe0, 0x11, 0xb6, 0xdc, 0x92, 0xca, 0x42, 0x49, 0x83, 0x52, 0xe6, 0x09, 0xd0,
	0xcc, 0x78, 0x45, 0x1a, 0x76, 0x3b, 0xfb, 0x9c, 0xdf, 0x3d, 0x3e, 0xbe, 0xba, 0xe0, 0x41, 0x72,
	0x9c, 0xe4, 0x47, 0x11, 0xc2, 0x7c, 0xc2, 0xe6, 0x53, 0x4c, 0x45, 0x74, 0xf2, 0x64, 0x84, 0x45,
	0xd2, 0x8b, 0xb2, 0x19, 0x2b, 0x78, 0xc8, 0x67, 0x4c, 0x30, 0x68, 0x2b, 0x2a, 0xfc, 0x4b, 0x85,
	0x15, 0xe5, 0xdc, 0xc8, 0x58, 0xc6, 0x14, 0x14, 0xc9, 0x27, 0xcd, 0x3b, 0x8f, 0x2e, 0x4e, 0x25,
	0xa8, 0xe2, 0xba, 0x17, 0x73, 0x39, 0xc7, 0xa9, 0x26, 0x83, 0xcf, 0x16, 0x68, 0xbc, 0x96, 0x1a,
	0xfc, 0x00, 0xfe, 0x53, 0xe6, 0x90, 0x20, 0xdb, 0xf4, 0xcd, 0x6e, 0xbb, 0x77, 0x2f, 0xfc, 0x57,
	0xbd, 0x50, 0x8d, 0x0c, 0x5e, 0xf6, 0x83, 0xd3, 0xd2, 0x33, 0x56, 0xa5, 0xd7, 0xac, 0x84, 0x4d,
	0xe9, 0xd5, 0x08, 0xda, 0x96, 0x5e, 0x6b, 0x9e, 0x4c, 0x27, 0x07, 0x01, 0x41, 0x41, 0xdc, 0x54,
	0xb1, 0x03, 0x04, 0xdf, 0x81, 0x46, 0x2e, 0x12, 0x81, 0xed, 0x9a, 0x6f, 0x76, 0xaf, 0xf6, 0x1e,
	0x5e, 0x12, 0x1f, 0x1e, 0x4a, 0xb8, 0x7f, 0x67, 0x53, 0x7a, 0x7a, 0x6e, 0x5b, 0x7a, 0xff, 0xeb,
	0x58, 0xf5, 0x1a, 0xc4, 0x5a, 0x86, 0x43, 0x00, 0x74, 0x73, 0xf9, 0x5f, 0x76, 0x5d, 0x75, 0xbf,
	0x7f, 0x49, 0xf8, 0x21, 0xc7, 0x69, 0x7f, 0x5f, 0xb6, 0xdf, 0x94, 0x9e, 0x25, 0x07, 0xb7, 0xa5,
	0xd7, 0xae, 0xd2, 0x39, 0x4e, 0x83, 0xb8, 0x95, 0x9d, 0x73, 0xf0, 0x2e, 0x00, 0xe9, 0x0c, 0x27,
	0x02, 0xa3, 0x61, 0x22, 0x6c, 0xcb, 0x37, 0xbb, 0xf5, 0xb8, 0x55, 0x29, 0xcf, 0x45, 0xf0, 0xc3,
	0x04, 0x0d, 0xd5, 0x15, 0x06, 0xa0, 0x49, 0xe8, 0x49, 0x32, 0x21, 0xa8, 0x63, 0x38, 0x37, 0x17,
	0x4b, 0xff, 0xba, 0xfe, 0x98, 0x34, 0x07, 0xda, 0x80, 0xb7, 0x81, 0xc5, 0x38, 0xa6, 0x1d, 0xd3,
	0xb9, 0xb2, 0x58, 0xfa, 0x2d, 0x05, 0xbc, 0xe1, 0x98, 0xc2, 0x7d, 0xb0, 0xc7, 0x93, 0x22, 0xc7,
	0xa8, 0x53, 0x73, 0xae, 0x2d, 0x96, 0x7e, 0x5b, 0x59, 0x6f, 0x95, 0x04, 0x7b, 0x00, 0x12, 0x9a,
	0x17, 0xe3, 0x31, 0x49, 0x09, 0xa6, 0x62, 0x38, 0x2e, 0x28, 0xca, 0x3b, 0x75, 0xc7, 0x59, 0x2c,
	0xfd, 0x5b, 0x7a, 0xf9, 0x3b, 0xf6, 0x2b, 0xe9, 0xca, 0xc0, 0x74, 0xc2, 0x64, 0xa0, 0xb5, 0x13,
	0xf8, 0x42, 0x49, 0x8e, 0xf5, 0xe5, 0xbb, 0x6b, 0x1c, 0x58, 0xbf, 0xbf, 0x79, 0x46, 0x3f, 0x3e,
	0x5d, 0xb9, 0xe6, 0xd9, 0xca, 0x35, 0x7f, 0xad, 0x5c, 0xf3, 0xeb, 0xda, 0x35, 0xce, 0xd6, 0xae,
	0xf1, 0x73, 0xed, 0x1a, 0xef, 0x9f, 0x65, 0x44, 0x1c, 0x15, 0xa3, 0x30, 0x65, 0xd3, 0x48, 0x2d,
	0xf4, 0x31, 0xc5, 0xe2, 0x23, 0x9b, 0x1d, 0x47, 0x94, 0x21, 0x1c, 0x7d, 0xda, 0x3d, 0x31, 0x31,
	0xe7, 0x38, 0x3f, 0x3f, 0xb4, 0xd1, 0x9e, 0xba, 0xaf, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x55, 0x33, 0x20, 0xc0, 0x09, 0x03, 0x00, 0x00,
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.GroupSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGroup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.State != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.GroupID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGroup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GroupID.Size()
	n += 1 + l + sovGroup(uint64(l))
	if m.State != 0 {
		n += 1 + sovGroup(uint64(m.State))
	}
	l = m.GroupSpec.Size()
	n += 1 + l + sovGroup(uint64(l))
	if m.CreatedAt != 0 {
		n += 1 + sovGroup(uint64(m.CreatedAt))
	}
	return n
}

func sovGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Group_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GroupSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroup = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// TakeKeeper is an autogenerated mock type for the TakeKeeper type
type TakeKeeper struct {
	mock.Mock
}

type TakeKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *TakeKeeper) EXPECT() *TakeKeeper_Expecter {
	return &TakeKeeper_Expecter{mock: &_m.Mock}
}

// SubtractFees provides a mock function with given fields: ctx, amt
func (_m *TakeKeeper) SubtractFees(ctx types.Context, amt types.Coin) (types.Coin, types.Coin, error) {
	ret := _m.Called(ctx, amt)

	var r0 types.Coin
	var r1 types.Coin
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, types.Coin) (types.Coin, types.Coin, error)); ok {
		return rf(ctx, amt)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.Coin) types.Coin); ok {
		r0 = rf(ctx, amt)
	} else {
		r0 = ret.Get(0).(types.Coin)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.Coin) types.Coin); ok {
		r1 = rf(ctx, amt)
	} else {
		r1 = ret.Get(1).(types.Coin)
	}

	if rf, ok := ret.Get(2).(func(types.Context, types.Coin) error); ok {
		r2 = rf(ctx, amt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TakeKeeper_SubtractFees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubtractFees'
type TakeKeeper_SubtractFees_Call struct {
	*mock.Call
}

// SubtractFees is a helper method to define mock.On call
//   - ctx types.Context
//   - amt types.Coin
func (_e *TakeKeeper_Expecter) SubtractFees(ctx interface{}, amt interface{}) *TakeKeeper_SubtractFees_Call {
	return &TakeKeeper_SubtractFees_Call{Call: _e.mock.On("SubtractFees", ctx, amt)}
}

func (_c *TakeKeeper_SubtractFees_Call) Run(run func(ctx types.Context, amt types.Coin)) *TakeKeeper_SubtractFees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(types.Coin))
	})
	return _c
}

func (_c *TakeKeeper_SubtractFees_Call) Return(_a0 types.Coin, _a1 types.Coin, _a2 error) *TakeKeeper_SubtractFees_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TakeKeeper_SubtractFees_Call) RunAndReturn(run func(types.Context, types.Coin) (types.Coin, types.Coin, error)) *TakeKeeper_SubtractFees_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTakeKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewTakeKeeper creates a new instance of TakeKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTakeKeeper(t mockConstructorTestingTNewTakeKeeper) *TakeKeeper {
	mock := &TakeKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
